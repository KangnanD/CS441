# Generated by Django 3.0.8 on 2021-05-15 20:27

import Member.models
import Member.storage
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=500)),
                ('created_at', models.DateTimeField(default=datetime.datetime(2021, 5, 15, 20, 27, 36, 718033, tzinfo=utc), verbose_name='created_date')),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2021, 5, 15, 20, 27, 36, 718033, tzinfo=utc), verbose_name='updated_date')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=15)),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=400)),
                ('image', models.ImageField(default='courses/course.png', storage=Member.storage.OverwriteStorage(), upload_to=Member.models.Course.upload_to)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('file', models.FileField(upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='FileType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('docs', 'Documents'), ('image', 'Images'), ('file', 'File'), ('link', 'URL LINK'), ('zip', 'Archive')], default='image', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('image', models.ImageField(default='students/student.png', storage=Member.storage.OverwriteStorage(), upload_to=Member.models.Member.upload_to)),
                ('accept', models.BooleanField()),
                ('role', models.CharField(choices=[('STUDENT', 'STUDENT'), ('TEACHER_ASSISTANT', 'TEACHER_ASSISTANT'), ('TEACHER', 'TEACHER')], default='STUDENT', max_length=20)),
                ('courses', models.ManyToManyField(blank=True, related_name='member_courses', to='Member.Course')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('description', models.CharField(max_length=500)),
                ('tag', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('content', models.CharField(max_length=500)),
                ('file', models.FileField(null=True, upload_to=Member.models.Post.upload_to, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'png', 'xlsx', 'xls', 'zip', '7z', 'rar', 'mp4', 'avi', 'mp3'])])),
                ('publish_date', models.DateTimeField(default=datetime.datetime(2021, 5, 15, 20, 27, 36, 716034, tzinfo=utc), verbose_name='publish_date')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Member.Course')),
                ('dislikes', models.ManyToManyField(blank=True, related_name='post_dislikes', to='Member.Member')),
                ('file_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Member.FileType')),
                ('likes', models.ManyToManyField(blank=True, related_name='post_likes', to='Member.Member')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Member.Member')),
            ],
        ),
        migrations.CreateModel(
            name='Jira',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('EPIC', 'EPIC'), ('STORY', 'STORY'), ('TASK', 'TASK'), ('ISSUE', 'ISSUE'), ('BUG', 'BUG'), ('SUB_TASK', 'SUB_TASK')], default='ISSUE', max_length=15)),
                ('code', models.CharField(max_length=15)),
                ('title', models.CharField(max_length=150)),
                ('description', models.CharField(max_length=500)),
                ('created_at', models.DateTimeField(default=datetime.datetime(2021, 5, 15, 20, 27, 36, 719034, tzinfo=utc), verbose_name='created_date')),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2021, 5, 15, 20, 27, 36, 719034, tzinfo=utc), verbose_name='updated_date')),
                ('due_at', models.DateTimeField(default=datetime.datetime(2021, 5, 15, 20, 27, 36, 719034, tzinfo=utc), verbose_name='due_date')),
                ('assignee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignee', to='Member.Member')),
                ('comments', models.ManyToManyField(blank=True, related_name='jira_comments', to='Member.Comment')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Member.Course')),
                ('files', models.ManyToManyField(blank=True, related_name='jira_files', to='Member.File')),
                ('likes', models.ManyToManyField(blank=True, related_name='jira_likes', to='Member.Member')),
                ('links', models.ManyToManyField(blank=True, related_name='jira_links', to='Member.Jira')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reported', to='Member.Member')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Member.Status')),
            ],
        ),
        migrations.AddField(
            model_name='file',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Member.Member'),
        ),
        migrations.AddField(
            model_name='comment',
            name='files',
            field=models.ManyToManyField(blank=True, related_name='comment_files', to='Member.File'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_user', to='Member.Member'),
        ),
    ]
